name: Release

on:
  push:
    branches:
      - main
      - alpha
      - beta
      - next
      - 'feature/*'
    tags:
      - '*'  # Trigger on all tag pushes
      
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment to deploy (e.g., dev, staging, prod)'
        required: true
        default: 'dev'

permissions:
  contents: read  # Required for checkout

jobs:
  # Linting Jobs
  terraform-format-check:
    name: Terraform Format Check
    if: |
      !(
        github.event_name == 'workflow_dispatch' &&
        startsWith(github.ref, 'refs/tags/')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.11
      - name: Check Terraform Formatting
        run: terraform fmt -check -recursive

  python-format-check:
    name: Python Format Check
    if: |
      !(
        github.event_name == 'workflow_dispatch' &&
        startsWith(github.ref, 'refs/tags/')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Black
        run: pip install black
      - name: Run Black Format Check
        run: black --check -l 120 .

  flake-check:
    name: Python Linting (Flake8)
    if: |
      !(
        github.event_name == 'workflow_dispatch' &&
        startsWith(github.ref, 'refs/tags/')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Flake8
        run: pip install flake8
      - name: Run Flake8
        run: flake8 .

  safety-check:
    name: Python Dependency Safety Check
    if: |
      !(
        github.event_name == 'workflow_dispatch' &&
        startsWith(github.ref, 'refs/tags/')
      )
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Safety CLI to check for vulnerabilities
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          args: --detailed-output 
  
  tests:
    name: Tests
    # Skip if event is 'workflow_dispatch' AND it's triggered by a tag.
    if: >
      !(
        github.event_name == 'workflow_dispatch' &&
        startsWith(github.ref, 'refs/tags/')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Create Virtual Environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install Requirements
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
     
      - name: Run Tests with Pytest
        run: |
          pytest -s -vvv -rsPxf --cov=. --cov-append --cov-report term-missing tests
      
      - name: Check Test Coverage
        run: |
          coverage=$(pytest --cov=. --cov-report term | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
          echo "Coverage: $coverage%"
          coverage_int=${coverage%.*}
          if [ "$coverage_int" -lt 90 ]; then
            echo "Coverage is below 90%! Failing the job."
            exit 1
          fi




  # Release Job
  release:
    name: Release
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' &&
       !contains(github.event.head_commit.message, '[skip ci]')) ||
      (github.event_name == 'workflow_dispatch')
    permissions:
      contents: write  # To push tags
      issues: write
      pull-requests: write
      id-token: write
    outputs:
      git_short_sha: ${{ steps.capture_tag.outputs.git_short_sha }}
      release_tag: ${{ steps.capture_tag.outputs.release_tag }}
      image_tag: ${{ steps.capture_tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Semantic Release and Plugins
        run: |
          npm install -g semantic-release@21.0.2 @semantic-release/gitlab @semantic-release/exec @semantic-release/changelog @semantic-release/release-notes-generator @semantic-release/commit-analyzer @semantic-release/git

      - name: Fetch all tags
        run: git fetch --tags

      - name: Run Semantic Release
        id: semantic_release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Capture New Tag and Set Image Tag
        id: capture_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            RELEASE_TAG=${GITHUB_REF#refs/tags/}
            IMAGE_TAG=${RELEASE_TAG}
          else
            RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            GIT_SHORT_SHA=$(git rev-parse --short HEAD)
            IMAGE_TAG=latest-${GIT_SHORT_SHA}
          fi
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "GIT_SHORT_SHA=${GIT_SHORT_SHA:-}" >> $GITHUB_ENV
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "git_short_sha=${GIT_SHORT_SHA:-}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

  # Build and Push Containers
  build-push-containers:
    name: Build and Push Docker Images to ECR
    # if: startsWith(github.ref, 'refs/tags/')
    needs: release
    runs-on: ubuntu-latest
    outputs:
      final_tag: ${{ steps.build-and-push.outputs.final_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Build, Tag, and Push Docker Images
        id: build-and-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE_REPO: ${{ secrets.SERVICE_ECR_REPO }}
          PROXY_REPO: ${{ secrets.PROXY_ECR_REPO }}
          RELEASE_TAG: ${{ needs.release.outputs.release_tag }}
          GIT_SHORT_SHA: ${{ needs.release.outputs.git_short_sha }}
          IMAGE_TAG: ${{ needs.release.outputs.image_tag }}
        run: |
          FINAL_TAG=${IMAGE_TAG}
          echo "final_tag=${FINAL_TAG}" >> $GITHUB_OUTPUT
          echo "final tag is ${FINAL_TAG}"
          docker build -t $ECR_REGISTRY/$SERVICE_REPO:${FINAL_TAG} .
          docker push $ECR_REGISTRY/$SERVICE_REPO:${FINAL_TAG}
          docker build -t $ECR_REGISTRY/$PROXY_REPO:${FINAL_TAG} ./django_proxy
          docker push $ECR_REGISTRY/$PROXY_REPO:${FINAL_TAG}

  # Trivy Vulnerability Scans
  trivy-vulnerabilities-scan:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    needs: 
      - build-push-containers
      - release
    env:
      SERVICE_REPO: ${{ secrets.SERVICE_ECR_REPO }}
      PROXY_REPO: ${{ secrets.PROXY_ECR_REPO }}
      RELEASE_TAG: ${{ needs.release.outputs.release_tag }}
      GIT_SHORT_SHA: ${{ needs.release.outputs.git_short_sha }}
      IMAGE_TAG: ${{ needs.release.outputs.image_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Set ECR_REGISTRY
        run: echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Download JUnit Template
        run: |
          curl -o junit.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/junit.tpl

      - name: Scan Service Image and Print Report
        run: |
          FINAL_TAG=${{ env.IMAGE_TAG }}
          docker pull $ECR_REGISTRY/$SERVICE_REPO:$FINAL_TAG
          trivy image --timeout 10m --db-repository public.ecr.aws/aquasecurity/trivy-db \
            $ECR_REGISTRY/$SERVICE_REPO:$FINAL_TAG --exit-code 0 --cache-dir .trivycache/ \
            --format template --template "@junit.tpl" -o trivy.junit.xml
          trivy image --timeout 10m --db-repository public.ecr.aws/aquasecurity/trivy-db \
            $ECR_REGISTRY/$SERVICE_REPO:$FINAL_TAG --exit-code 1 --cache-dir .trivycache/ \
            --no-progress --severity CRITICAL,HIGH  

      - name: Fail on High or Critical Vulnerabilities (Proxy)
        run: |
          FINAL_TAG=${{ env.IMAGE_TAG }}
          docker pull $ECR_REGISTRY/$PROXY_REPO:$FINAL_TAG
          trivy image --timeout 10m --db-repository public.ecr.aws/aquasecurity/trivy-db \
            $ECR_REGISTRY/$PROXY_REPO:$FINAL_TAG --exit-code 0 --cache-dir .trivycache/ \
            --format template --template "@junit.tpl" -o trivy.junit.xml
          trivy image --timeout 10m --db-repository public.ecr.aws/aquasecurity/trivy-db \
            $ECR_REGISTRY/$PROXY_REPO:$FINAL_TAG --exit-code 1 --cache-dir .trivycache/ \
            --no-progress --severity CRITICAL,HIGH 

  # Trivy Terraform Scan
  trivy-terraform-scan:
    name: Trivy Terraform Scan
    runs-on: ubuntu-latest
    env:
      SCAN_FOLDER: terraform
      TRIVY_CACHE_DIR: .
      ENV: ${{ github.event.inputs.env || 'dev' }}
      TF_VAR_admin: ${{ secrets.TF_VAR_ADMIN }}
      TF_VAR_admin_email: ${{ secrets.TF_VAR_ADMIN_EMAIL }}
      TF_VAR_admin_password: ${{ secrets.TF_VAR_ADMIN_PASSWORD }}
      TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
      TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
      TF_VAR_django_secret_key: ${{ secrets.TF_VAR_DJANGO_SECRET_KEY }}
      IMAGE_TAG: ${{ needs.release.outputs.image_tag }}
    needs: build-push-containers
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Download JUnit Template
        run: |
          curl -o junit.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/junit.tpl

      - name: Terraform Security Scan
        run: |
          trivy filesystem --scanners secret,misconfig,vuln \
            --db-repository public.ecr.aws/aquasecurity/trivy-db --cache-dir ${TRIVY_CACHE_DIR} \
            --tf-vars ./${SCAN_FOLDER}/${ENV}.tfvars --exit-code 0 --no-progress \
            --format template --template "@junit.tpl" -o trivy_tf.junit.xml ${SCAN_FOLDER}
          trivy filesystem --scanners secret,misconfig,vuln \
            --db-repository public.ecr.aws/aquasecurity/trivy-db --cache-dir ${TRIVY_CACHE_DIR} \
            --tf-vars ./${SCAN_FOLDER}/${ENV}.tfvars --exit-code 0 --no-progress \
            --format table ${SCAN_FOLDER}

      - name: Upload Trivy Terraform JUnit Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-tf-junit-report
          path: trivy_tf.junit.xml

  # Trivy Terraform Result Check
  trivy-terraform-result-check:
    name: Trivy Terraform Result Check
    runs-on: ubuntu-latest
    needs: trivy-terraform-scan
    env:
      TRIVY_TF_SCAN_HARD_FAIL_THRESHOLD: ${{ secrets.TRIVY_TF_SCAN_HARD_FAIL_THRESHOLD || 'HIGH' }}
      TRIVY_TF_SCAN_SOFT_FAIL_THRESHOLD: ${{ secrets.TRIVY_TF_SCAN_SOFT_FAIL_THRESHOLD || 'MEDIUM' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Trivy Terraform JUnit Report
        uses: actions/download-artifact@v4
        with:
          name: trivy-tf-junit-report
          path: .

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Create check_report.py
        run: |
          cat > check_report.py << 'EOF'
          import sys
          import os
          import re
          from xml.etree import ElementTree

          # Environment variables for thresholds
          minimum_to_hard_fail = os.environ.get("TRIVY_TF_SCAN_HARD_FAIL_THRESHOLD", "HIGH")
          minimum_to_soft_fail = os.environ.get("TRIVY_TF_SCAN_SOFT_FAIL_THRESHOLD", "MEDIUM")

          # Severity levels mapping
          matching_statuses = {
              "LOW": {"LOW", "MEDIUM", "HIGH", "CRITICAL"},
              "MEDIUM": {"MEDIUM", "HIGH", "CRITICAL"},
              "HIGH": {"HIGH", "CRITICAL"},
              "CRITICAL": {"CRITICAL"},
          }

          # Get the severity levels for fail thresholds
          statuses_that_hard_fail = matching_statuses.get(minimum_to_hard_fail, set())
          statuses_that_soft_fail = matching_statuses.get(minimum_to_soft_fail, set())

          # Parse the test suite XML file
          try:
              test_suite = ElementTree.parse("trivy_tf.junit.xml").getroot()
          except FileNotFoundError:
              print("Error: 'trivy_tf.junit.xml' not found. Failing the job.")
              sys.exit(1)
          except ElementTree.ParseError as e:
              print(f"Error: Failed to parse 'trivy_tf.junit.xml': {e}")
              sys.exit(1)

          # Collect vulnerabilities by severity
          vulnerabilities = {}

          for test_case in test_suite.iter("testcase"):
              name_attr = test_case.attrib.get("name", "")
              severity_match = re.match(r"^\[([^\]]+)\]", name_attr)
              
              if severity_match:
                  severity = severity_match.group(1)
                  location = name_attr.split("]")[-1].strip()  # Extract location after severity
                  if severity not in vulnerabilities:
                      vulnerabilities[severity] = []
                  vulnerabilities[severity].append(location)

          # Aggregate severities
          found_severities = set(vulnerabilities.keys())

          # If no vulnerabilities are found
          if not found_severities:
              print("Passing. No problems found by Trivy.")
              sys.exit(0)

          # Print vulnerabilities grouped by severity
          print("Vulnerabilities found:")
          for severity, locations in vulnerabilities.items():
              print(f"\nSeverity: {severity}")
              for location in locations:
                  print(f"  - {location}")

          # Determine pipeline status
          if found_severities & statuses_that_hard_fail:
              print("\nHard failing pipeline due to severe vulnerabilities.")
              sys.exit(1)

          if found_severities & statuses_that_soft_fail:
              print("\nSoft failing pipeline due to vulnerabilities.")
              sys.exit(2)

          print("\nPassing pipeline despite vulnerabilities.")
          sys.exit(0)

          EOF

      - name: Run check_report.py
        run: |
          set +e
          python3 check_report.py || EXIT_CODE=$?
          exit $EXIT_CODE

  # Terraform Plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: 
      - release
      - build-push-containers
    if: |
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./terraform/
    env:
      ENV: ${{ github.event.inputs.env || 'dev' }}
      SERVICE_IMAGE: ${{ secrets.SERVICE_ECR_REPO }}
      PROXY_IMAGE: ${{ secrets.PROXY_ECR_REPO }}
      IMAGE_TAG: ${{ needs.release.outputs.image_tag }}
      GIT_SHORT_SHA: ${{ needs.release.outputs.git_short_sha || '' }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      ADMIN: ${{ secrets.ADMIN }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      SHARED_PASSWORD: ${{ secrets.SHARED_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.11

      - name: Terraform Init and Plan
        id: plan
        run: |
          terraform init -backend-config="./backends/${ENV}.backend"
          terraform plan -var-file="${ENV}.tfvars" -out=tfplan.binary \
            -var="service_version=${IMAGE_TAG}" \
            -var="proxy_version=${IMAGE_TAG}" \
            -var="env=${ENV}" \
            -var="db_username=${DB_USERNAME}" \
            -var="db_password=${DB_PASSWORD}" \
            -var="admin=${ADMIN}" \
            -var="admin_password=${ADMIN_PASSWORD}" \
            -var="admin_email=${ADMIN_EMAIL}" \
            -var="shared_password=${SHARED_PASSWORD}" \
            -var="django_secret_key=${DJANGO_SECRET_KEY}" \
            -var="google_maps_api_key=${GOOGLE_MAPS_API_KEY}"
          terraform show -json tfplan.binary > tfplan.json

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ./terraform/tfplan.binary

  # Terraform Apply
  terraform-apply:
    name: Terraform Apply
    defaults:
      run:
        working-directory: ./terraform/
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: 
      github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.env || 'dev' }}
    env:
      ENV: ${{ github.event.inputs.env || 'dev' }}
      SERVICE_IMAGE: ${{ secrets.SERVICE_ECR_REPO }}
      PROXY_IMAGE: ${{ secrets.PROXY_ECR_REPO }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      ADMIN: ${{ secrets.ADMIN }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      SHARED_PASSWORD: ${{ secrets.SHARED_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      IMAGE_TAG: ${{ needs.release.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.11

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ./terraform

      - name: Terraform Apply
        run: |
          terraform init -backend-config="./backends/${ENV}.backend"
          terraform apply  tfplan.binary

