name: Build Images

on:
  push:


jobs:
  build:
    name: Build Docker Images and Save as Artifacts
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Retrieve the short Git commit SHA
      - name: Get Short Git SHA
        id: get_sha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash

      # 4. Build the Main Application Docker Image
      - name: Build Main Docker Image
        run: |
          docker build -t wedding:latest-${{ env.SHORT_SHA }} .
        shell: bash

      # 5. Build the Proxy Docker Image
      - name: Build Proxy Docker Image
        run: |
          docker build -t wedding_proxy:latest-${{ env.SHORT_SHA }} ./django_proxy
        shell: bash

      # 6. Save the Main Docker Image as a Tarball
      - name: Save Main Docker Image as Tarball
        run: |
          docker save -o wedding_latest-${{ env.SHORT_SHA }}.tar wedding:latest-${{ env.SHORT_SHA }}
        shell: bash

      # 7. Save the Proxy Docker Image as a Tarball
      - name: Save Proxy Docker Image as Tarball
        run: |
          docker save -o wedding_proxy_latest-${{ env.SHORT_SHA }}.tar wedding_proxy:latest-${{ env.SHORT_SHA }}
        shell: bash

      # 8. Upload the Main Docker Image Tarball as an Artifact
      - name: Upload Main Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wedding_image_${{ env.SHORT_SHA }}
          path: wedding_latest-${{ env.SHORT_SHA }}.tar

      # 9. Upload the Proxy Docker Image Tarball as an Artifact
      - name: Upload Proxy Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wedding_proxy_image_${{ env.SHORT_SHA }}
          path: wedding_proxy_latest-${{ env.SHORT_SHA }}.tar
